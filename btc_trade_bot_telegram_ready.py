
import pandas as pd
import requests
import schedule
import time
from binance.client import Client
from datetime import datetime, timedelta
import pytz

# C·∫•u h√¨nh
API_KEY = ''
API_SECRET = ''
TELEGRAM_BOT_TOKEN = '7649149703:AAEdfU1rPOlTNJpXa_6nAe_kQK5TuOGMR8U'
TELEGRAM_CHAT_ID = '142194645'

client = Client(API_KEY, API_SECRET)

# L·∫•y d·ªØ li·ªáu n·∫øn 6h
def get_klines():
    end_time = datetime.utcnow()
    start_time = end_time - timedelta(days=10)
    klines = client.get_klines(
        symbol='BTCUSDT',
        interval=Client.KLINE_INTERVAL_6HOUR,
        start_str=start_time.strftime('%d %b %Y %H:%M:%S'),
        end_str=end_time.strftime('%d %b %Y %H:%M:%S')
    )
    df = pd.DataFrame(klines, columns=[
        'open_time', 'open', 'high', 'low', 'close', 'volume',
        'close_time', 'qav', 'trades', 'taker_buy_vol', 'taker_buy_qav', 'ignore'
    ])
    df['open_time'] = pd.to_datetime(df['open_time'], unit='ms')
    df['close_time'] = pd.to_datetime(df['close_time'], unit='ms')
    df[['open', 'high', 'low', 'close', 'volume']] = df[['open', 'high', 'low', 'close', 'volume']].astype(float)
    
    # Chuy·ªÉn sang gi·ªù GMT+7
    df['open_time'] = df['open_time'].dt.tz_localize('UTC').dt.tz_convert('Asia/Bangkok')
    
    return df

# Ph√¢n lo·∫°i volume
def classify_volume(df):
    df['vol_avg'] = df['volume'].rolling(window=20).mean()
    def vol_type(row):
        if row['volume'] < 0.5 * row['vol_avg']:
            return 'th·∫•p'
        elif row['volume'] <= row['vol_avg']:
            return 'v·ª´a'
        else:
            return 'cao'
    df['vol_type'] = df.apply(vol_type, axis=1)
    return df

# So s√°nh h∆∞·ªõng n·∫øn
def candle_direction(row):
    return 'tƒÉng' if row['close'] > row['open'] else 'gi·∫£m'

# Ph√¢n t√≠ch chi·∫øn l∆∞·ª£c
def analyze(df):
    df['dir'] = df.apply(candle_direction, axis=1)
    today = df[df['open_time'].dt.date == datetime.now(pytz.timezone("Asia/Bangkok")).date()]
    yesterday = df[df['open_time'].dt.date == (datetime.now(pytz.timezone("Asia/Bangkok")).date() - timedelta(days=1))]
    
    if len(today) < 2 or len(yesterday) < 4:
        return "Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch."

    msg = f"üìä D·ª± b√°o BTC 6H - {datetime.now(pytz.timezone('Asia/Bangkok')).strftime('%Y-%m-%d %H:%M')}:\n"
    
    n1, n2 = today.iloc[0], today.iloc[1]
    n3t, n4t = yesterday.iloc[2], yesterday.iloc[3]

    # Rule 1: 4t vol th·∫•p ‚Üí n·∫øn 1 h√¥m nay ng∆∞·ª£c h∆∞·ªõng 3t
    if n4t['vol_type'] == 'th·∫•p':
        expected = 'tƒÉng' if n3t['dir'] == 'gi·∫£m' else 'gi·∫£m'
        msg += f"‚Ä¢ N·∫øn 4 h√¥m tr∆∞·ªõc c√≥ KL th·∫•p ‚Üí D·ª± ƒëo√°n n·∫øn 1 h√¥m nay s·∫Ω {expected}:\n"

    # Rule 2: 4t v√† 1 vol th·∫•p ‚Üí n·∫øn 2 c√πng h∆∞·ªõng 3t
    if n4t['vol_type'] == 'th·∫•p' and n1['vol_type'] == 'th·∫•p':
        msg += f"‚Ä¢ N·∫øn 4t & 1 vol th·∫•p ‚Üí D·ª± ƒëo√°n n·∫øn 2 h√¥m nay s·∫Ω {n3t['dir']}:\n"

    # Rule 3: n·∫øn 2 vol th·∫•p ‚Üí n·∫øn 3 c√πng h∆∞·ªõng n·∫øn 1
    if n2['vol_type'] == 'th·∫•p':
        msg += f"‚Ä¢ N·∫øn 2 vol th·∫•p ‚Üí D·ª± ƒëo√°n n·∫øn 3 h√¥m nay s·∫Ω {n1['dir']}:\n"

    return msg

# G·ª≠i tin nh·∫Øn Telegram
def send_telegram(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message,
        "parse_mode": "HTML"
    }
    try:
        r = requests.post(url, json=payload)
        print(f"üì® Telegram status: {r.status_code}, response: {r.text}")
    except Exception as e:
        print(f"‚ùå L·ªói g·ª≠i telegram: {e}")

# T·ªïng h·ª£p v√† g·ª≠i
def job():
    try:
        df = get_klines()
        df = classify_volume(df)
        message = analyze(df)
        send_telegram(message)
    except Exception as e:
        send_telegram(f"‚ùå L·ªói khi ch·∫°y bot: {e}")

# G·ª≠i tin nh·∫Øn khi kh·ªüi ƒë·ªông bot
send_telegram("ü§ñ Bot d·ª± ƒëo√°n 6H b·∫Øt ƒë·∫ßu...")

# L√™n l·ªãch ch·∫°y m·ªói 6 ti·∫øng (gi·ªù GMT+7)
schedule.every().day.at("07:05").do(job)
schedule.every().day.at("13:05").do(job)
schedule.every().day.at("19:05").do(job)
schedule.every().day.at("01:05").do(job)

print("‚è≥ Bot ƒë√£ s·∫µn s√†ng ch·∫°y t·ª± ƒë·ªông m·ªói 6 ti·∫øng...")

while True:
    schedule.run_pending()
    time.sleep(60)
